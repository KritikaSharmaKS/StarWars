{"version":3,"sources":["NameCell.jsx","App.js","serviceWorker.js","index.js"],"names":["NameCell","_ref","name","url","react_default","a","createElement","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","_this2","initialUsers","console","log","fetch","then","response","json","people","results","map","p","setState","columns","Header","accessor","Cell","props","src_NameCell","value","original","Footer","reduce","total","height","Number","_ref2","mass","length","es","data","filterable","defaultPageSize","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAYeA,SAVE,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,IACzB,OACCC,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,KAAGC,KAAMJ,GAAMD,aCkEJM,qBAjEb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZC,MAAO,IAHKR,mFAQM,IAAAS,EAAAN,KACbO,EAAe,GACnBC,QAAQC,IAAI,qBACZC,MAAM,gCACPC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACxBF,KAAK,SAAAG,GACJP,EAAeO,EAAOC,QAAQC,IAAI,SAAAC,GAAC,OAAIA,IACvCX,EAAKY,SAAS,CAAEb,MAAOE,IACvBC,QAAQC,IAAIF,sCAIdC,QAAQC,IAAI,UACZ,IAAMU,EAAU,CAAC,CACfC,OAAQ,OACRC,SAAU,OACVC,KAAM,SAACC,GAAD,OAAW/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAUlC,KAAMiC,EAAME,MAAOlC,IAAKgC,EAAMG,SAASnC,QAClE,CACA6B,OAAQ,SACRC,SAAU,UAEX,CACCD,OAAQ,SACRC,SAAU,SACVM,OACEnC,EAAAC,EAAAC,cAAA,YACEM,KAAKI,MAAMC,MAAMuB,OAAO,SAACC,EAADxC,GAAA,IAAUyC,EAAVzC,EAAUyC,OAAV,OAAuBD,EAASE,OAAOD,IAAS,KAI7E,CACCV,OAAQ,OACRC,SAAU,OACVM,OACEnC,EAAAC,EAAAC,cAAA,YACEM,KAAKI,MAAMC,MAAMuB,OAAO,SAACC,EAADG,GAAA,IAAUC,EAAVD,EAAUC,KAAV,OAAqBJ,EAASE,OAAOE,IAAO,GAAGjC,KAAKI,MAAMC,MAAM6B,UAK9F,OAAOlC,KAAKI,MAAMC,MAChBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACEC,KAAQpC,KAAKI,MAAMC,MACnBc,QAAWA,EACXkB,YAAU,EACVC,gBAAiB,EACjBC,UAAU,0BAId/C,EAAAC,EAAAC,cAAA,4BA9DU8C,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.1159ae72.chunk.js","sourcesContent":["import React from 'react';\n\nconst NameCell = ({ name, url }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\t<a href={url}>{name}</a>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default NameCell;","import React, { Component } from 'react';\nimport './App.css';\nimport NameCell from './NameCell';\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css';\n\nclass App extends Component {\n  constructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tusers: []\n\t\t}\n\t}\n\n\n  componentDidMount(){\n    let initialUsers = [];\n    console.log(\"componentDidMount\");\n    fetch('https://swapi.co/api/people/')\n\t\t.then(response => response.json())\n    .then(people => {\n      initialUsers = people.results.map(p => p);\n      this.setState({ users: initialUsers, });\n      console.log(initialUsers);\n    });\n  }\n  render() {\n    console.log(\"render\");\n    const columns = [{\n      Header: 'Name',\n      accessor: 'name',\n      Cell: (props) => <NameCell name={props.value} url={props.original.url} />\n    },{\n      Header: 'Gender',\n      accessor: 'gender'\n    }\n    ,{\n      Header: 'Height',\n      accessor: 'height',\n      Footer: (\n        <span>{\n          this.state.users.reduce((total, { height }) => total += Number(height), 0)\n        }</span>\n      )\n    }\n    ,{\n      Header: 'Mass',\n      accessor: 'mass',\n      Footer: (\n        <span>{\n          this.state.users.reduce((total, { mass }) => total += Number(mass), 0)/this.state.users.length\n        }</span>\n      )\n    }\n  ]\n    return this.state.users ? (\n      <div>\n        <h1>Star Wars</h1>\n        <div>\n          <ReactTable \n            data = {this.state.users}\n            columns = {columns}\n            filterable\n            defaultPageSize={5}\n            className=\"-striped -highlight\"\n          />\n        </div>\n      </div>\n    ) : <h1>Loading</h1>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}